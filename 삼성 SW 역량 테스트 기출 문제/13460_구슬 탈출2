# 1. graph에 굳이 이동 내역을 남겨가며 풀 필요가 없음.
# 2. 기울임의 횟수를 10번으로 제한시켜놓고 q가 없을 때까지 돌린다면 모든 경우의 수를 고려할 수 있음
#    -> 답을 맞추자마자 return해야 하는 문제가 아닌, 모든 경우의 수를 고려할 때에는 그래프에 이력을 남기지 않는 방향으로 생각
# 3. visited를 4차원으로 표현할 수도 있다
# 4. 그래프 상에서 움직일 때 이동거리를 체크해서 더 많이 이동한 구슬의 경우 한 칸 덜 이동하도록 처리해주는 것
# 5. 정답인 경우를 if문 걸어놓고 진행하는 방법도 있음
# 6. 벽을 만날 때까지 움직여야 하는 경우 move라는 함수를 만들어서 사용하면 코드가 간결해짐(현재 좌표, 방향값 파라메터로 넣음)

import sys
from collections import deque

def move(x, y, dx, dy):
    move_cnt = 0
    
    while graph[x + dx][y + dy] != "#" and graph[x][y] != "O":
        x += dx
        y += dy
        move_cnt += 1

    return x, y, move_cnt

def bfs(rx, ry, bx, by):
    q = deque()
    visited[rx][ry][bx][by] = True
    q.append([rx, ry, bx, by, 0])

    dx = [0, 0, 1, -1]
    dy = [1, -1, 0, 0]

    while q:
        rx, ry, bx, by, cnt = q.popleft()
        if cnt >= 10:
            break

        for i in range(4):
            nrx, nry, rcnt = move(rx, ry, dx[i], dy[i])
            nbx, nby, bcnt = move(bx, by, dx[i], dy[i])

            if visited[nrx][nry][nbx][nby] == False:
                if graph[nbx][nby] != "O":
                    if graph[nrx][nry] == "O":
                        return cnt + 1
                    
                    if nrx == nbx and nry == nby:
                        if rcnt > bcnt:
                            nrx -= dx[i]
                            nry -= dy[i]
                        else:
                            nbx -= dx[i]
                            nby -= dy[i]
                    
                    visited[nrx][nry][nbx][nby] = True
                    q.append([nrx, nry, nbx, nby, cnt + 1])
    
    return -1

n, m = map(int, sys.stdin.readline().split())

graph = []
visited = [[[[False] * m for _ in range(n)] for _ in range(m)] for _ in range(n)]

for _ in range(n):
    graph.append(list(sys.stdin.readline().strip()))

for i in range(n):
    for j in range(m):
        if graph[i][j] == "R":
            u, v = i, j
        elif graph[i][j] == "B":
            k, l = i, j

result = bfs(u, v, k, l)
print(result)
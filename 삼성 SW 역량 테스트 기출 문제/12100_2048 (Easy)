from copy import deepcopy
import sys
from collections import deque 

def move(p_graph, d, dx, dy):
    can_merged = [[True] * n for _ in range(n)]

    if d in [1, 3]: # 위/왼쪽으로 이동하는 경우
        start_idx, end_idx, step = 0, n, 1
    else:
        start_idx, end_idx, step = n - 1, -1, -1

    for i in range(start_idx, end_idx, step):
        for j in range(start_idx, end_idx, step):
            if p_graph[i][j] == 0: # 움직일 필요가 없다면
                continue
                
            x, y = i, j
            temp_value = p_graph[x][y]
            p_graph[x][y] = 0
            nx = x + dx
            ny = y + dy

            while True:
                if 0 > nx or n <= nx or 0 > ny or n <= ny:
                    break
                
                if p_graph[nx][ny] == 0: # 비어있는 경우
                    x, y = nx, ny
                    nx = x + dx
                    ny = y + dy

                elif p_graph[nx][ny] == temp_value and can_merged[nx][ny] == True:
                    x, y = nx, ny
                    can_merged[x][y] = False
                    break

                else:
                    break

            p_graph[x][y] += temp_value
                        
    return p_graph                    

def bfs(p_graph):
    q = deque()
    q.append(p_graph)

    dx = [0, 0, 1, -1]
    dy = [1, -1, 0, 0]

    max_block = -1
    step = 0

    while q:
        for _ in range(len(q)):
            q_graph = q.popleft()
            
            for i in range(4):
                temp_graph = [item[:] for item in q_graph]
                moved_graph = move(temp_graph, i, dx[i], dy[i])

                for j in range(n):
                    for k in range(n):
                        if max_block < moved_graph[j][k]:
                            max_block = moved_graph[j][k]

                q.append(moved_graph)
    
        step += 1

        if step == 5:
            return max_block

n = int(sys.stdin.readline())

graph = []
for _ in range(n):
    graph.append(list(map(int, sys.stdin.readline().split())))

result = bfs(graph)
print(result)
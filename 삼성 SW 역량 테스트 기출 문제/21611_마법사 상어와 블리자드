import sys
from collections import deque

def init_grid():
    dx = [0, 1, 0, -1] #서남동북
    dy = [-1, 0, 1, 0]

    x = y = int(n / 2) # 배열의 중앙 좌표

    direction = number = move_count = 0
    dist = 1
    
    while True:
        move_count += 1 # 움직인 횟수
        for _ in range(dist): # dist 만큼 direction 방향으로 이동
            nx = x + dx[direction]
            ny = y + dy[direction]

            # 종료 조건 : 이동한 좌표가 (0, -1)인 경우. 배열의 길이가 홀수면 항상 마지막 좌표는 (0, -1), 방향은 서쪽
            if (nx, ny) == (0, -1):
                return

            # 번호 증가 및 기록
            number += 1
            index_board[nx][ny] = number
            index_list.append([nx, ny])

            # (x, y) 갱신
            x = nx
            y = ny
        
        if move_count == 2: # 남 -> 동 or 북 -> 서 방향 전환 시
            dist += 1 # 이동거리 1 증가
            move_count = 0 # 초기화

        direction = (direction + 1) % 4

def ice_throw(d, s):
    x = y = int(n / 2) # 중앙

    for _ in range(s):
        nx = x + dx_blizzard[d]
        ny = y + dy_blizzard[d]

        if board[nx][ny]: #값이 있다면
            board[nx][ny] = 0

        x = nx
        y = ny

def move_marble():
    q = deque()
    for x, y in index_list:
        if board[x][y] == 0:
            q.append([x, y])
        elif board[x][y] > 0 and q:
            nx, ny = q.popleft()
            board[nx][ny] = board[x][y]
            board[x][y] = 0
            q.append([x, y])
        
def bomb_marble():
    visited = deque()
    cnt = 0
    num = -1 # 임의의 수
    flag = False # 폭발 여부

    for x, y in index_list:
        if num == board[x][y]:
            cnt += 1
            visited.append([x, y])
        else:
            if cnt >= 4:
                score[num - 1] += cnt
                flag = True
            while visited:
                nx, ny = visited.popleft()
                if cnt >= 4:
                    board[nx][ny] = 0
            
            num = board[x][y]
            cnt = 1
            visited.append([x, y])
    
    return flag
    
def change_marble():
    cnt = 1
    tempx, tempy = index_list[0]
    num = board[tempx][tempy]
    nums = []

    for i in range(1, len(index_list)):
        x, y = index_list[i][0], index_list[i][1]
        if num == board[x][y]:
            cnt += 1
        else:
            nums.append(cnt)
            nums.append(num)
            num = board[x][y]
            cnt = 1
    
    idx = 0
    for x, y in index_list:
        if not nums:
            break
        board[x][y] = nums[idx]
        idx += 1
        if idx == len(nums):
            break
    
n, m = map(int, sys.stdin.readline().split())

board = []
index_board = [[0] * n for _ in range(n)]
index_list = []
score = [0] * 3

for _ in range(n):
    board.append(list(map(int, sys.stdin.readline().split())))

# 나선형 인덱싱
init_grid()

dx_blizzard = [0, -1, 1, 0, 0] #북남서동
dy_blizzard = [0, 0, 0, -1, 1]

# m번 블리자드 시전
for _ in range(m):
    d, s = map(int, sys.stdin.readline().split())

    # 1. 얼음 파편 던지기
    ice_throw(d, s)

    # 2. 구슬 이동
    move_marble()

    # 3. 구슬 폭발
    while bomb_marble():
        move_marble()

    # 4. 구슬 변화
    change_marble()
    
sum = 0
for i in range(3):
    sum += score[i] * (i + 1)

print(sum)
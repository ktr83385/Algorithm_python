import sys
from collections import deque

def bfs(start):
    global b
    q = deque()
    q.append(start)
    visited[start] = True

    while q:
        v = q.popleft()
        
        if v == b:
            return count_list[b]
        
        for node in graph[v]:
            if node <= b and visited[node] == False :
                q.append(node)
                visited[node] = True
                count_list[node] = count_list[v] + 1

    return -2

a, b = map(int, sys.stdin.readline().split())

graph = [[] for _ in range(b + 1)]
visited = [False] * (b + 1)
count_list = [0] * (b + 1)

for i in range(1, (b // 2) + 2):
    if i * 2 <= b:
        graph[i].append(i * 2)
    if i * 10 + 1 <= b:
        graph[i].append(i * 10 + 1)
    
result = bfs(a)
print(result + 1)

# import sys
# from collections import deque

# def bfs(start):
#     global b
#     q = deque()
#     q.append([1, start])

#     while q:
#         cnt, v = q.popleft()
#         for i in range(2):
#             # 2 곱
#             if i == 0:
#                 if v * 2 < b:
#                     q.append([cnt + 1 , v * 2])
#                 if v * 2 == b:
#                     return cnt + 1
#             # 1 을 추가
#             elif i == 1:
#                 target = v * 10 + 1
#                 if target < b:
#                     q.append([cnt + 1 , target])
#                 if target == b:
#                     return cnt + 1
#     return -1


# a, b = map(int, sys.stdin.readline().split())
# # visited = [False] * (b + 1)

# result = bfs(a)
# print(result)
from collections import deque

def bfs(x, y):
    global n, m, graph, visited
    q = deque()
    q.append([x, y])
    graph[x][y] = 2
    visited[x][y] = True

    dx = [0, 0, 1, -1]  #동서남북
    dy = [1, -1, 0, 0]

    while q:
        a, b = q.popleft()
        
        for i in range(len(dx)):
            nx = dx[i] + a
            ny = dy[i] + b

            if nx < 0 or ny < 0 or nx >= n or ny >= m:
                continue
            if visited[nx][ny] == False:
                if graph[nx][ny] == 1:
                    q.append([nx, ny])
                    graph[nx][ny] = graph[a][b] + 1
                    visited[nx][ny] = True

    return graph[n - 1][m - 1] - 1


        

n, m = map(int, input().split())

graph = [list(map(int, input())) for _ in range(n)]
visited = [[False] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        if graph[i][j] == 1:
            result = bfs(i, j)

print(result)
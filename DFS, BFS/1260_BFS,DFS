from collections import deque
import sys

def bfs(v):
    q = deque()
    q.append(v)
    visited_bfs[v] = True
    while q:
        v = q.popleft()
        print(v, end = " ")    
        for i in range(1, node_num + 1):
            if visited_bfs[i] == False and graph[v][i] == 1:
                q.append(i)
                visited_bfs[i] = True
            

def dfs(v):
    visited_dfs[v] = True
    print(v, end = " ")
    for i in range(1, node_num + 1):
        if visited_dfs[i] == False and graph[v][i] == 1:
            dfs(i)


node_num, load_num, start_node = map(int, sys.stdin.readline().rstrip().split())

graph = [[0] * (node_num + 1) for _ in range(node_num + 1)] # graph는 노드의 개수만큼 확보해주면 됨
visited_dfs = [False] * (node_num + 1)
visited_bfs = [False] * (node_num + 1)

for i in range(load_num):
    a, b = map(int, sys.stdin.readline().rstrip().split())
    graph[a][b] = graph[b][a] = 1

dfs(start_node)
print()
bfs(start_node)
# 벽을 부수지 않았다면 벽을 통과할 수 있는 조건을 추가하여 2가지 경우로 bfs 진행할 수 있도록

import sys
from collections import deque

def bfs(x, y):
    q = deque()
    flag = 0
    q.append([flag, x, y])
    visited[x][y] = 1

    dx = [0, 0, 1, -1] #동서남북
    dy = [1, -1, 0, 0]

    while q:
        flag, a, b = q.popleft()
        
        for i in range(4):
            nx = dx[i] + a
            ny = dy[i] + b

            if -1 < nx < n and -1 < ny < m:
                if flag == 0:
                    if graph[nx][ny] == 1 and visited2[nx][ny] == 0:
                        # flag = 1
                        q.append([1, nx, ny])
                        visited2[nx][ny] = visited[a][b] + 1
                        # graph[nx][ny] = graph[a][b] + 1
                        if [nx,ny] == [n-1,m-1]:
                            return visited2[nx][ny] 

                    elif visited[nx][ny] == 0 and graph[nx][ny] == 0:
                        q.append([flag, nx, ny])
                        visited[nx][ny] = visited[a][b] + 1
                        # graph[nx][ny] = graph[a][b] + 1
                        if [nx,ny] == [n-1,m-1]:
                            return visited[nx][ny] 

                else:
                    if visited2[nx][ny] == 0 and graph[nx][ny] == 0 and visited[nx][ny] == 0:
                        q.append([flag, nx, ny])
                        visited2[nx][ny] = visited2[a][b] + 1
                        # graph[nx][ny] = graph[a][b] + 1
                    if [nx,ny] == [n-1,m-1]:
                        return visited2[nx][ny] 

    return -1


n, m = map(int, sys.stdin.readline().split())

graph = []
visited = [[0] * m for _ in range(n)]
visited2 = [[0] * m for _ in range(n)]
for _ in range(n):
    graph.append(list(map(int, sys.stdin.readline().strip())))

if n == 1 and m == 1:
    print(1)
else:
    result = bfs(0, 0)
    print(result)   
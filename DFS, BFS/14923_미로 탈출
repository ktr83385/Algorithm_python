import sys
from collections import deque

def bfs(x, y):
    q = deque()
    flag = 0
    q.append([flag, x, y])
    visited[x][y] = 1

    dx = [0, 0, 1, -1] #동서남북
    dy = [1, -1, 0, 0]

    while q:
        flag, a, b = q.popleft()

        for i in range(4):
            nx = dx[i] + a
            ny = dy[i] + b

            if 0 < nx < n + 1 and 0 < ny < m + 1:
                if flag == 0 and visited2[nx][ny] == 0 and graph[nx][ny] == 1:
                    visited2[nx][ny] = visited[a][b] + 1
                    q.append([1, nx, ny])

                    if nx == ex and ny == ey:
                        return visited2[nx][ny] - 1

                elif flag == 0 and visited[nx][ny] == 0 and graph[nx][ny] == 0:
                    visited[nx][ny] = visited[a][b] + 1
                    q.append([0, nx, ny])

                    if nx == ex and ny == ey:
                        return visited[nx][ny] - 1

                elif flag == 1 and visited2[nx][ny] == 0 and graph[nx][ny] == 0:
                    visited2[nx][ny] = visited2[a][b] + 1
                    q.append([1, nx, ny])

                    if nx == ex and ny == ey:
                        return visited2[nx][ny] - 1
    
    return -1

n, m = map(int, sys.stdin.readline().split())
hx, hy = map(int, sys.stdin.readline().split())
ex, ey = map(int, sys.stdin.readline().split())

graph = [[0]]

for i in range(1, n + 1):
    graph.append(list(map(int, sys.stdin.readline().split())))
    graph[i].insert(0, 5)

visited = [[0] * (m + 1) for _ in range(n + 1)]
visited2 = [[0] * (m + 1) for _ in range(n + 1)]

result = bfs(hx, hy)
print(result)
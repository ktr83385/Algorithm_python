import sys
from collections import deque

n = int(sys.stdin.readline().rstrip())

def bfs(x, y):
    global break_time
    q = deque()
    q.append([x, y])
    visited[x][y] = True

    dx = [-1, -2, -2, -1, 1, 2, 2, 1]     #북동동, 북북동, 북북서, 북서서, 남서서, 남남서, 남남동, 남동동
    dy = [2, 1, -1, -2, -2, -1, 1, 2]

    while q:
        a, b = q.popleft()
        
        for i in range(len(dx)):
            nx = dx[i] + a
            ny = dy[i] + b
            
            if nx < 0 or ny < 0 or nx >= w_h or ny >= w_h:
                continue
            if visited[nx][ny] == False:
                q.append([nx, ny])
                visited[nx][ny] = True
                graph[nx][ny] = graph[a][b] + 1
                
                if nx == target_x and ny == target_y:
                    break_time = True
                    break
        if break_time == True:
            break

    return graph[target_x][target_y] - 1

for i in range(n):
    w_h = int(sys.stdin.readline().rstrip())

    result = 0
    break_time = False
    graph = [[0] * w_h for _ in range(w_h)]
    visited = [[False] * w_h for _ in range(w_h)]

    a, b = map(int, sys.stdin.readline().rstrip().split())
    graph[a][b] = 1
    target_x, target_y = map(int, sys.stdin.readline().rstrip().split())
    
    for j in range(w_h):
        for k in range(w_h):
            if visited[j][k] == False and graph[j][k] == 1:
                result = bfs(j, k)
    
    print(result)
import sys
from collections import deque

def bfs(x, y):
    q = deque()
    q.append([0, x, y])
    visited[x][y] = 1
    
    dx = [0, 0, 1, -1] #동서남북
    dy = [1, -1, 0, 0]

    while q:
        gram_flag, a, b = q.popleft()

        for i in range(4):
            nx = dx[i] + a
            ny = dy[i] + b

            if -1 < nx < n and -1 < ny < m:
                # 1. 그람 X, 벽부수기 X
                if gram_flag == 0:
                    if visited[nx][ny] == 0 and graph[nx][ny] == 0:
                        graph[nx][ny] = graph[a][b] + 1
                        visited[nx][ny] = 1
                        q.append([0, nx, ny])

                        if nx == (n - 1) and ny == (m - 1):
                            if graph[n - 1][m - 1] > t:
                                return "Fail"
                            else:
                                return graph[n - 1][m - 1]

                    elif visited[nx][ny] == 0 and graph[nx][ny] == 2:
                        graph[nx][ny] = graph[a][b] + 1
                        visited[nx][ny] = 1
                        q.append([1, nx, ny])

                        if nx == (n - 1) and ny == (m - 1):
                            if graph[n - 1][m - 1] > t:
                                return "Fail"
                            else:
                                return graph[n - 1][m - 1]
                
                # 2. 그람 O, 벽부수기 X or 벽부수기 o
                # 그람을 얻은 순간부터 돌아가야할 경우도 생길 수 있음. (공주에게 가는 길이 모두 벽에 둘러쌓여있어 그람을 얻어야만 하는 경우)
                # 그럴려면 graph의 값이 0이나 1일 때만 따진다면, 문제의 답을 못 구함
                elif gram_flag == 1:
                    if visited2[nx][ny] == 0:
                        graph[nx][ny] = graph[a][b] + 1
                        visited2[nx][ny] = 1
                        q.append([1, nx, ny])

                        if nx == (n - 1) and ny == (m - 1):
                            if graph[n - 1][m - 1] > t:
                                return "Fail"
                            else:
                                return graph[n - 1][m - 1]
    
    return "Fail"
                
n, m, t = map(int, sys.stdin.readline().split())

graph = []
visited = [[0] * m for _ in range(n)]
visited2 = [[0] * m for _ in range(n)]

for _ in range(n):
    graph.append(list(map(int, sys.stdin.readline().split())))

result = bfs(0, 0)
print(result)
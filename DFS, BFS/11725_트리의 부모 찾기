import sys
from collections import deque

# def bfs(v):
#     global n, parents_list
#     q = deque()
#     q.append(v)
#     visited[v] = True
    
#     while q:
#         v = q.popleft()
        
#         for i in range(1, n + 1):
#             if visited[i] == False and graph[v][i] == 1:
#                 q.append(i)
#                 parents_list[i] = v
#                 visited[i] = True

def bfs(start):
    global visited
    q = deque()
    q.append(start)

    visited[start] = True

    while q:
        node = q.popleft()
        for n in graph[node]:
            if not visited[n]:
                q.append(n)
                visited[n] = True
                parents_list[n] = node

n = int(sys.stdin.readline())

# graph = [[0] * (n + 1) for _ in range(n + 1)]
visited = [False] * (n + 1)
parents_list = [0] * (n + 1)

graph = [[] for _ in range(n+1)]

for i in range(1, n):
    a, b = map(int, sys.stdin.readline().split())
    # graph[a][b] = graph[b][a] = 1
    graph[a].append(b)
    graph[b].append(a)

bfs(1)

for i in range(2, n + 1):
    print(parents_list[i])

# import sys
# from collections import deque
# def dfs(n):
#     print(n, end=' ')
#     visited[n] = True
#     for i in graph[n]:
#         if not visited[i]:
#             dfs(i)
# def bfs(n):
#     visited[n] = True
#     queue = deque([n])
#     while queue:
#         v = queue.popleft()
#         print(v, end= ' ')
#         for i in graph[v]:
#             if not visited[i]:
#                 queue.append(i)
#                 visited[i] = True


# n, m, v = map(int, sys.stdin.readline().split())
# graph = [[] for _ in range(n+1)]
# visited = [False] * (n + 1)
# for _ in range(m):
#     a, b = map(int, sys.stdin.readline().split())
#     graph[a].append(b)
#     graph[b].append(a)
# for i in range(1, n+1):
#     graph[i].sort()

# dfs(v)
# visited = [False] * (n + 1)
# print()
# bfs(v)
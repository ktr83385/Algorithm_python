# 1. 1초마다 각 바이러스가 동시에 돌아야함
# 2. 몇 초가 지났는지 카운트를 어떻게?
#   -> 1부터 k까지 for문을 돌려서, 낮은 바이러스 숫자부터 q에 들어가도록
#   -> 이후 q에 담기는 원소들은 len(q)를 통해 초 단위로 while문이 전개될 수 있도록 처리

import sys
from collections import deque

def bfs(s):
    global n
    q = deque()
    for i in range(1, k + 1):
        for j in range(1, n + 1):
            for h in range(1, n + 1):
                if graph[j][h] == i and visited[j][h] == False:
                    visited[j][h] = True
                    q.append([j, h])
    
    s_count = 0

    dx = [0, 0, 1, -1] #동서남북
    dy = [1, -1, 0, 0]

    while q:
        if s_count == s:
            return
        
        s_count += 1

        for i in range(len(q)):
            a, b = q.popleft()
            
            for i in range(4):
                nx = dx[i] + a
                ny = dy[i] + b
                
                if 1 <= nx <= n and 1 <= ny <= n and visited[nx][ny] == False and graph[nx][ny] == 0:
                    visited[nx][ny] = True
                    graph[nx][ny] = graph[a][b]
                    q.append([nx, ny])

n, k = map(int, sys.stdin.readline().split())

graph = [[0]]
visited = [[False] * (n + 1) for _ in range(n + 1)]

for i in range(1, n + 1):
    graph.append(list(map(int, sys.stdin.readline().split())))
    graph[i].insert(0, 0)

s, x, y = map(int, sys.stdin.readline().split())

bfs(s)

print(graph[x][y])